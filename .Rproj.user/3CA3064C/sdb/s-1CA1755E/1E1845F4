{
    "contents" : "#include <Rcpp.h>\nusing namespace Rcpp;\n\n//' Paradox simulation with PE output for speed\n//'\n//' @export\n// [[Rcpp::export]]\n\nRcpp::List paradox_pe_sim(\n    int t_end = 1000, \n    int num_pop = 10, \n    NumericVector alpha = NumericVector::create(), \n    double beta = 1/150,\n    double m = 0.01, \n    double n = 1, \n    double sigma = 0.05,\n    double q = 0.01, \n    double cpar = 1.4, \n    double p = 0.5,\n    double effort_init = 10,\n    double biomass_init = 50\n    ) {\n  NumericMatrix biomass(num_pop, t_end);\n  NumericVector effort(t_end);\n  NumericMatrix ts(num_pop + 1, t_end);\n  NumericMatrix stoch_m(num_pop, t_end);\n\n  // initialize simulation values in first year\n  for (int i = 0; i < num_pop; ++i) {\n    biomass(i, 0) = biomass_init;\n  }\n  effort(0) = effort_init;\n\n  // stochastic component\n  RNGScope scope; // ensure seed gets set\n  for(int i = 0; i < num_pop; ++i) {\n    stoch_m(i, _) = exp(rnorm(t_end, -pow(sigma, 2)/2, sigma));\n  }\n\n  // loop over time and populations\n  // to fill biomass and effort data\n  for (int j = 1; j < t_end; ++j) { // cycle over time\n    for(int i = 0; i < num_pop; ++i) { // cycle over populations\n      biomass(i, j) = (biomass(i, j-1) * (alpha[i] * stoch_m(i, j-1))) /\n        (1 + beta * pow(biomass(i, j-1), 1/n)) + biomass(i, j-1) *\n        exp(-m-q * effort(j-1));\n    }\n    double total_biomass = sum(biomass(_, j-1));\n    effort(j) = effort(j-1) * exp(-cpar) + p * total_biomass * \n      ((q * effort(j-1))/(m + q * effort(j-1))) * (1-exp(-m-q*effort(j-1)));\n  }\n\n  // combine biomass and effort into one matrix\n    //for(int i = 0; i < num_pop; ++i) {\n       //ts(i, _) = biomass(i, _);\n    //}\n    //ts(num_pop + 1 - 1, _) = effort;\n    \n  // remove burn-in period:\n  int burnin = 500;\n\n  NumericMatrix biomass_burned(num_pop, t_end - burnin);\n  for (int j = 0; j < (t_end - burnin); ++j) { // cycle over time\n    for (int i = 0; i < num_pop; ++i) { // cycle over populations\n      biomass_burned(i, j) = biomass(i, j + burnin); \n    }\n  }\n\n  NumericVector sd_ts(num_pop);\n  NumericVector mean_ts(num_pop);\n  NumericVector total(t_end - burnin);\n  NumericVector CV_ts(num_pop);\n\n  for (int i = 0; i < num_pop; ++i) {\n    sd_ts(i) = sd(biomass_burned(i,_));\n    mean_ts(i) = mean(biomass_burned(i,_));\n  }\n\n  double mean_sd_ts = mean(sd_ts);\n  double mean_mean_ts = mean(mean_ts);\n\n  for (int j = 0; j < (t_end - burnin); ++j) {\n    total(j) = sum(biomass_burned(_,j));\n  }\n  \n  double sd_total = sd(total);\n  double mean_total = mean(total);\n\n\tCV_ts = sd_ts / mean_ts;\n\tdouble CV_total = sd_total / mean_total;\n\n  double PE = mean(CV_ts / CV_total);\n\n  double sync = pow(sd(total), 2)/ pow(sum(sd_ts), 2);\n\n  return Rcpp::List::create(Rcpp::Named(\"pe\") = PE,\n                            Rcpp::Named(\"mean_sd_ts\") = mean_sd_ts,\n                            Rcpp::Named(\"mean_mean_ts\") = mean_mean_ts,\n                            Rcpp::Named(\"sd_total\") = sd_total,\n                            Rcpp::Named(\"mean_total\") = sd_total,\n                            Rcpp::Named(\"sync\") = sync);\n}\n",
    "created" : 1384902631139.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "344233914",
    "id" : "1E1845F4",
    "lastKnownWriteTime" : 1384902404,
    "path" : "~/Dropbox/PostDoc/2013_ParadoxPortfolios/Manipulate/paradox/src/paradox_pe_sim.cpp",
    "project_path" : "src/paradox_pe_sim.cpp",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "cpp"
}